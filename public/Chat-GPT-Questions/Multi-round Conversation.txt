I have already setup my Blog CMS website using Node.JS, Express, sqlite3, and PUG. I already have an DeepSeek Api Model which the code is below. What I would like todo 
is intergrate the Multi-round Conversation code into my exsiting code. Can you help?
----------------------------------------------------------------------------------------------------------------------------------------------------
DeepSeekApi.js
----------------------------------------------------------------------------------------------------------------------------------------------------
const db = require('./db');
const deepseek_chat_db = require('./deepseek-chat');
const fs = require('fs');
const { OpenAI } = require('openai');

const deepseekApiKey = 'sk-8b52f88bd2714004ad9b3706e157f4f3';
const openai = new OpenAI({
    baseURL: 'https://api.deepseek.com',
    apiKey: deepseekApiKey
});

class DeepSeekApi {




    static async createCompletion(message, session_id, user_id) {
        const systemPrompt = `
            The user will provide some exam text. Please parse the "question" and "answer" and output them in JSON format. 

            EXAMPLE INPUT: 
            Which is the highest mountain in the world? Mount Everest.

            EXAMPLE JSON OUTPUT:
            {
                "question": "Which is the highest mountain in the world?",
                "answer": "Mount Everest"
            }
            `;

        try {
            // Store user message
            await deepseek_chat_db.run(
                'INSERT INTO messages (session_id, user_id, role, content) VALUES (?, ?, ?, ?)',
                [session_id, user_id, 'user', message]
            );


            const response = await openai.chat.completions.create({
                model: "deepseek-chat",
                messages: [
                    { role: "system", content: systemPrompt },
                    { role: "user", content: message }
                ],
                response_format: { type: 'json_object' },
                temperature: 0.7
            });

            let parsed;
            try {
                parsed = JSON.parse(response.choices?.[0]?.message?.content);
            } catch (parseError) {
                console.error('Failed to parse response:', response);
                DeepSeekApi.logError(response);
                throw new Error('Failed to parse AI response');

            }
            // Store assistant message
            await deepseek_chat_db.run(
                'INSERT INTO messages (session_id, user_id, role, content) VALUES (?, ?, ?, ?)',
                [session_id, user_id, 'assistant', parsed.answer]
            );
            return parsed;

        } catch (error) {
            console.error('Error in createCompletion:', error);
            DeepSeekApi.logError(error);
            throw error;
        }
    }


    static getDeepseekChatHistory(session_id) {
        try {

            const query = `SELECT * FROM messages WHERE session_id = ? ORDER BY timestamp ASC`;
            return new Promise((resolve, reject) => {
                deepseek_chat_db.all(query, [session_id], (err, messages) => {
                    if (err) return reject(err);
                    resolve(messages);
                });
            });

        } catch (error) {
            console.error('Error:', error);
            res.status(500).json({ error: 'An error occurred' });
        }
    }

    static logError(err) {
        const errorMessage = `${new Date().toISOString()} - Error: ${err.message}\n`;
        fs.appendFile('error.log', errorMessage, (fsErr) => {
            if (fsErr) {
                console.error('Failed to write to log file:', fsErr);
            }
        });
    }
}

module.exports = DeepSeekApi;
--------------------------------------------------------------------------------------------------------------------------
The code below is my Controller code followed by the route code.
--------------------------------------------------------------------------------------------------------------------------
apiController.js
--------------------------------------------------------------------------------------------------------------------------
const DeepSeekApi = require('../models/DeepSeekApi');

exports.deepseekDashboard = async (req, res) => {
    res.render('user/deepseekDashboard', { user: req.user });
}

exports.createCompletion = async (req, res) => {
    const { message, session_id } = req.body;
    const result = await DeepSeekApi.createCompletion(message, session_id, req.user.id );
    res.json({ data: result })
}

exports.getDeepseekChatHistory = async (req, res) => {
    try {
        const { session_id } = req.body;
        const messages = await DeepSeekApi.getDeepseekChatHistory(session_id);
        res.json(messages);
    } catch (error) {
        console.error('Error:', error);
        res.status(500).json({ error: 'Error retrieving history' });
    }
}
----------------------------------------------------------------------------------------------------------------------------
apiRoutes.js
----------------------------------------------------------------------------------------------------------------------------
const express = require('express');
const router = express.Router();
const apiController = require('../controllers/apiController');
const { ensureAuthenticated, ensureRole, ensureRoles, ensurePermission } = require('../middleware/permissionMiddleware');

router.get('/deepseekDashboard', ensureAuthenticated, ensureRoles('admin'), apiController.deepseekDashboard);
router.post('/deepseek/createCompletion', ensureAuthenticated, ensureRoles(['admin']), apiController.createCompletion);
router.post('/deepseekChatHistory', ensureAuthenticated, ensureRoles(['admin']), apiController.getDeepseekChatHistory);
module.exports = router;
-----------------------------------------------------------------------------------------------------------------------------
deep-seek-chat.pug
-----------------------------------------------------------------------------------------------------------------------------
mixin userCard(u)
  if u && u.id
    script.
      window.USER = !{JSON.stringify(u)};

    .card.direct-chat.direct-chat-warning.mb-3
      .card-header
        h3.card-title DeepSeek Chat
        .card-tools
          span.badge.text-bg-warning(title='3 New Messages') 3
          button.btn.btn-tool(type='button' data-lte-toggle='card-collapse')
            i.bi.bi-plus-lg(data-lte-icon='expand')
            i.bi.bi-dash-lg(data-lte-icon='collapse')
          button.btn.btn-tool(type='button' title='Contacts' data-lte-toggle='chat-pane')
            i.bi.bi-chat-text-fill
          button.btn.btn-tool(type='button' data-lte-toggle='card-remove')
            i.bi.bi-x-lg
      .card-body
        .direct-chat-messages#deep-seek-chat-messages
        .direct-chat-contacts
          ul.contacts-list#user-list
      .card-footer
        form#deep-seek-chat-form(method='post')
          .input-group
            button.input-group-text#send-btn(type="submit")
              span(class="bi bi-chat-text")   
            input.form-control#deep-seek-message-input(type='text' name='message' placeholder='Type Message ...')
            input.form-control#file-input(type='file' style='display: none;')
            span.input-group-text(type='button' onclick="$('#file-input').click();")
              span.material.material-attach-file.mbr-iconfont.mbr-iconfont-btn

    
    script.
      if (window.USER) {
        const s = document.createElement('script');
        s.src = `/js/deep-seek-chat.js?id=${encodeURIComponent(window.USER.id)}&username=${encodeURIComponent(window.USER.username)}&avatar=${encodeURIComponent(window.USER.avatar)}`;
        document.head.append(s);
      }

  else
    script.
      console.warn("USER data missing or invalid");
----------------------------------------------------------------------------------------------------------------------------------
deep-seek-chat.js client side code.
----------------------------------------------------------------------------------------------------------------------------------
$(function () {
    var socket = io();
    var msgCount = 0;
    var cls = 'end';
    // Get the current <script> tag
    const script = document.currentScript || document.querySelector('script[src*="deep-seek-chat.js"]');

    // Extract query string from the src
    const url = new URL(script.src);
    alert(url);
    const userId = url.searchParams.get("id");
    const username = url.searchParams.get("username");
    const avatar = url.searchParams.get("avatar");

    console.log({ userId, username, avatar });

    // Session management
    if (!localStorage.getItem('sessionId')) {
        localStorage.setItem('sessionId', crypto.randomUUID());
    }
    const sessionId = localStorage.getItem('sessionId');
    const $chatMessages = $('#deep-seek-chat-messages');
    const $userInput = $('#deep-seek-message-input');
    const $sendBtn = $('#send-btn');


   async function sendMessage() {
        const message = $userInput.val().trim();
        if (!message) return;

        // Disable input during processing
        $userInput.prop('disabled', true);
        $sendBtn.prop('disabled', true);

        try {
            //appendMessage('user', username, message, avatar, userId, socket.id, false);
            socket.emit('chatMessage', message); // Emit message to the server
            $userInput.val(''); // Clear the input field

            //role = 'assistant';
            const response = await $.ajax({
                url: '/api/deepseek/createCompletion',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ message: message, session_id: sessionId })
            });

            socket.emit('chatMessage', response.data.answer); // Emit message to the server
            /*appendMessage('assistant', username, response.data.answer, avatar, userId, socket.id, false);*/

        } catch (error) {
            console.error('Error:', error);
            alert('Error communicating with the server');
        } finally {
            $userInput.val('').prop('disabled', false).focus();
            $sendBtn.prop('disabled', false);
        }
    }
    // Load chat history
    async function loadHistory() {
        try {
            const messages = await $.ajax({
                url: '/api/deepseekChatHistory',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ session_id: sessionId })
            });

            messages.forEach(message => {
                switch (message.role) {
                    case 'user':
                        appendMessage('user', username, message.content, avatar, userId, socket.id, false);
                        break;
                    case 'assistant':
                        appendMessage('assistant', username, message.content, avatar, userId, socket.id, false);
                        break;
                }

            });
        } catch (error) {
            console.error('Error loading history:', error);
        }
    }
    // Event handlers
    $sendBtn.on('click', sendMessage);
    $userInput.on('keypress', function (e) {
        if (e.which === 13) { // Enter key
            sendMessage();
        }
    });

    loadHistory();
    // On form submission, send the message
    //$('#deep-seek-chat-form').on('submit', function (e) {
    //    e.preventDefault(); // Prevent form from submitting the traditional way
    //    var message = $('#deep-seek-message-input').val();
    //    socket.emit('deepseek-chatMessage', message); // Emit message to the server
    //    $('#deep-seek-message-input').val(''); // Clear the input field
    //    return false;
    //});

    // Handle file upload
    $('#file-input').change(function () {
        const file = this.files[0];
        const formData = new FormData();
        formData.append('file', file);

        // Upload the file to the server
        $.ajax({
            url: '/upload',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: (response) => {
                // Emit the file message to the server
                socket.emit('sendFile', {
                    username: 'Your Username', // Replace with dynamic username
                    fileUrl: response.fileUrl,
                    fileName: file.name,
                });
            },
            error: (err) => {
                console.error('File upload failed:' + err.responseText, err);
            },
        });
    });

    socket.on('chatError', (data) => {
        console.error('Chat Error:', data.error);
        alert(`Chat failed: ${data.error}`);
    });
    // Listen for file messages
    socket.on('fileMessage', (data) => {
        const fileMessage = `
            <div class="direct-chat-msg">
                <div class="direct-chat-infos clearfix">
                    <span class="direct-chat-name float-start">${data.username}</span>
                    <span class="direct-chat-timestamp float-end">${new Date().toLocaleTimeString()}</span>
                </div>
                <div class="direct-chat-text">
                    ${data.username} posted a file to the uploads directory: <a href="${data.fileUrl}" target="_blank" download>${data.fileName}</a>
                </div>
            </div>`;
        $chatMessages.append(fileMessage);
        $chatMessages.scrollTop($chatMessages[0].scrollHeight);
    });

    // Listen for user online event
    socket.on('user-online', (data) => {
        //console.log(`${data.username} is online`);
        // Update your UI to show the user is online
        msgCount += 1;
        if (msgCount % 2 === 0) {
            cls = '';
        } else {
            cls = 'end';
        }
        var msgTemplate = `
            <div class="direct-chat-msg ${cls}">
                <div class="direct-chat-infos clearfix">
                    <span class="direct-chat-name float-end">${data.username}&nbsp;<i class="far fa-file-video video_btn" data-socket-id="${data.socketId}"></i>&nbsp;<i class="bi bi-chat-text private_btn" data-privateId="${data.userId}"></i></span>
                    <span class="direct-chat-timestamp float-start">${new Date().toISOString()}</span>
                </div>
                <!-- /.direct-chat-infos-->
                <img class="direct-chat-img" src="${data.avatar}" alt="message user image" draggable="false">
                <!-- /.direct-chat-img-->
                <div class="direct-chat-text">
                    ${data.username} is online : Socket Id:${data.socketId}
                </div>
                <!-- /.direct-chat-text-->
            </div>
        `
        $chatMessages.append(msgTemplate); // Append the message to the chat
        $chatMessages.scrollTop($chatMessages[0].scrollHeight);
    });

    // Listen for user offline event
    socket.on('user-offline', (data) => {
        console.log(`${data.username} is offline`);
        // Update your UI to show the user is offline
        msgCount += 1;
        if (msgCount % 2 === 0) {
            cls = '';
        } else {
            cls = 'end';
        }
        var msgTemplate = `
            <div class="direct-chat-msg ${cls}">
                <div class="direct-chat-infos clearfix">
                    <span class="direct-chat-name float-end">${data.username}&nbsp;<i class="bi bi-chat-text private_btn" data-privateId="${data.id}"></i></span>
                    <span class="direct-chat-timestamp float-start">${new Date().toISOString()}</span>
                </div>
                <!-- /.direct-chat-infos-->
                <img class="direct-chat-img" src="${data.avatar}" alt="message user image" draggable="false">
                <!-- /.direct-chat-img-->
                <div class="direct-chat-text">
                    ${data.username} is offline
                </div>
                <!-- /.direct-chat-text-->
            </div>
        `
        $chatMessages.append(msgTemplate); // Append the message to the chat
        $chatMessages.scrollTop($chatMessages[0].scrollHeight);
    });

    // Listen for incoming messages
    socket.on('chatMessage', function (data) {

        msgCount += 1;
        //userId = data.id;
        if (msgCount % 2 === 0) {
            cls = '';
        } else {
            cls = 'end';
        }

        var msgTemplate = `
            <div class="direct-chat-msg ${cls}">
                <div class="direct-chat-infos clearfix">
                    <span class="direct-chat-name float-end">${data.username}&nbsp;<i class="bi bi-chat-text private_btn" data-privateId="${data.id}"></i></span> 
                    <span class="direct-chat-timestamp float-start">${new Date().toISOString()}</span>
                </div>
                <!-- /.direct-chat-infos-->
                <img class="direct-chat-img" src="${data.avatar}" alt="message user image" draggable="false">
                <!-- /.direct-chat-img-->
                <div class="direct-chat-text">
                    ${data.message} 
                </div>
                <!-- /.direct-chat-text-->
            </div>
        `
        $chatMessages.append(msgTemplate); // Append the message to the chat
        $chatMessages.scrollTop($chatMessages[0].scrollHeight);
    });

    // Send a private message
    $(document).on('click', '.private_btn', function () {

        var targetUserId = $(this).attr('data-privateId');
        var message = $('#message-input').val();

        // Emit private message to the server
        socket.emit('privateMessage', { to: targetUserId, message: message });

        // Append a pending message
        appendPendingMessage(targetUserId, message);
    });

    $(document).on('click', '.media_btn', function () {
        startMedia();
    });
    $(document).on('click', '.end-call_btn', function () {
        endCall();
    });
    $(document).on('click', '.video_btn', async function () {

        const socketId = $(this).attr('data-socket-id'); // Target SocketId

        peerConnection = new RTCPeerConnection(servers);

        // Add local stream to the peer connection
        localStream.getTracks().forEach((track) => peerConnection.addTrack(track, localStream));

        // Handle ICE candidates
        peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
                console.log('Sending ICE candidate:', {
                    to: socketId,
                    from: socket.id,
                    candidate: event.candidate,
                });

                socket.emit('ice-candidate', {
                    to: socketId,
                    from: socket.id, // Ensure this is the sender's ID
                    candidate: event.candidate,
                });
            }
        };

        // Handle remote stream
        peerConnection.ontrack = (event) => {
            $('#remote-video')[0].srcObject = event.streams[0];
        };

        // Create and send offer
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);

        socket.emit('offer', {
            to: socketId,
            from: socket.id,
            offer,
        });
    });
    // Acknowledgment: Update message status to Delivered
    socket.on('messageDelivered', ({ to, message }) => {
        updateMessageStatus(to, message, 'Delivered');
    });
    // Listen for flash messages
    socket.on('flash', function (data) {
        // Create a Bootstrap Toast dynamically
        const toastHTML = `
                <div class="toast show ${!data.isError ? 'text-bg-primary' : 'text-bg-danger'}  border-0 mb-2" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header">
                        <strong class="me-auto">Notification</strong>
                        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        ${data.message}
                    </div>
                </div>
            `;
        $('#toast-container').append(toastHTML);

        // Initialize and show the toast
        const toastEl = document.querySelector('.toast');
        const toast = new bootstrap.Toast(toastEl);
        toast.show();
    });
    // End call
    function endCall() {
        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }
        $('#remote-video')[0].srcObject = null;
    }

    // Start media stream
    function startMediaCall() {
        startMedia();
    }
    // Listen for incoming private messages
    socket.on('privateMessage', function (data) {
        appendMessage('user', data.username, data.message, data.avatar, data.from, data.socketId, true);
    });
    
    function appendMessage(role, username, message, avatar, userId, socketId, isPrivate) {
        const messageClass = role === 'user' ? 'user-message' : 'bot-message';
        msgCount++;
        cls = msgCount % 2 === 0 ? '' : 'end';

        var msgTemplate = `
            <div class="direct-chat-msg ${cls}">
                <div class="direct-chat-infos clearfix">
                    <span class="direct-chat-name float-end">${username}&nbsp;<i class="far fa-file-video video_btn" data-socket-id="${socketId}"></i>&nbsp;<i class="bi bi-chat-text private_btn" data-privateId="${userId}"></i></span>
                    <span class="direct-chat-timestamp float-start">${new Date().toISOString()}</span>
                </div>
                <!-- /.direct-chat-infos-->
                <img class="direct-chat-img" src="${avatar}" alt="message user image" draggable="false">
                <!-- /.direct-chat-img-->
                <div class="direct-chat-text">
                    ${message}
                </div>
                <!-- /.direct-chat-text-->
            </div>
        `
        $chatMessages.append(msgTemplate);
        $chatMessages.scrollTop($chatMessages[0].scrollHeight);
    }

    function appendPendingMessage(to, message) {
        msgCount++;
        cls = msgCount % 2 === 0 ? '' : 'end';

        var msgTemplate = `
            <div class="direct-chat-msg ${cls}" data-pending="true" data-to="${to}" data-message="${message}">
                <div class="direct-chat-infos clearfix">
                    <span class="direct-chat-name float-end">You&nbsp;<i class="bi bi-chat-text private_btn"></i></span>
                    <span class="direct-chat-timestamp float-start">${new Date().toISOString()}</span>
                </div>
                <div class="direct-chat-text">${message} <span class="status"> (Pending)</span></div>
            </div>`;
        $chatMessages.append(msgTemplate);
    }

    function updateMessageStatus(to, message, status) {
        const pendingMessages = $('.direct-chat-msg[data-pending="true"]');
        pendingMessages.each(function () {
            const pendingTo = $(this).data('to');
            const pendingMessage = $(this).data('message');
            if (pendingTo === parseInt(to) && pendingMessage === message) {
                $(this).find('.status').text(` (${status})`);
                $(this).removeAttr('data-pending'); // Remove pending attribute
            }
        });
    }

    // Acknowledgment: Update message status to Delivered
    socket.on('messageDelivered', ({ to, message }) => {
        updateMessageStatus(to, message, 'Delivered');
    });

    // Acknowledgment: Update message status to Failed
    socket.on('messageFailed', ({ to, message }) => {
        updateMessageStatus(to, message, 'Failed: User offline');
    });

    // Update the online user list
    socket.on('updateUserList', (users) => {
        const userList = $('#user-list');
        userList.empty(); // Clear the current list
        const userIdsInDOM = new Set();

        users.forEach(onlineUser => {
            // Prevent duplicate entries by tracking already added user IDs
            if (!userIdsInDOM.has(onlineUser.userId)) {
                const userItem = `
                <li>
                    <a href="#" draggable="false"></a>
                    <img class="contacts-list-img" src="${onlineUser.avatar}" alt="${onlineUser.username}" draggable="false">
                    <div class="contacts-list-info">
                        <span class="contacts-list-name"></span>
                        ${onlineUser.username}<small class="contacts-list-date float-end">${new Date().toLocaleTimeString()}</small>
                        <span class="contacts-list-msg">User ${onlineUser.username} is online...(${onlineUser.socketId})</span> 
                   </div>
                </li>`;
                userList.append(userItem);
                userIdsInDOM.add(onlineUser.userId);
            }
        });
    });

    let localStream = null;
    let peerConnection = null;

    const servers = {
        iceServers: [
            { urls: 'stun:stun.l.google.com:19302' }, // Public STUN server
        ],
    };

    // Access media devices
    async function startMedia() {
        try {
            localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
            $('#local-video')[0].srcObject = localStream;
        } catch (error) {
            console.error('Error accessing media devices:', error);
        }
    }

    // Start a call
    $('#start-call').click(async function () {
        const targetUserId = $('#call-target').val(); // Target SocketId

        peerConnection = new RTCPeerConnection(servers);

        // Add local stream to the peer connection
        localStream.getTracks().forEach((track) => peerConnection.addTrack(track, localStream));

        // Handle ICE candidates
        peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
                console.log('Sending ICE candidate:', {
                    to: targetUserId,
                    from: socket.id,
                    candidate: event.candidate,
                });

                socket.emit('ice-candidate', {
                    to: targetUserId,
                    from: socket.id, // Ensure this is the sender's ID
                    candidate: event.candidate,
                });
            }
        };

        // Handle remote stream
        peerConnection.ontrack = (event) => {
            $('#remote-video')[0].srcObject = event.streams[0];
        };

        // Create and send offer
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);

        socket.emit('offer', {
            to: targetUserId,
            from: socket.id,
            offer,
        });
    });

    // Handle offer
    socket.on('offer', async (data) => {
        peerConnection = new RTCPeerConnection(servers);

        // Add local stream to the peer connection
        localStream.getTracks().forEach((track) => peerConnection.addTrack(track, localStream));

        peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
                socket.emit('ice-candidate', {
                    to: targetUserId,        // The recipient's ID
                    from: socket.id,         // Your socket ID (the sender's ID)
                    candidate: event.candidate, // The ICE candidate
                });
                console.log('Emitting ICE candidate:', { to: targetUserId, from: socket.id });
            }
        };

        // Handle remote stream
        peerConnection.ontrack = (event) => {
            $('#remote-video')[0].srcObject = event.streams[0];
        };

        // Set remote description and send answer
        await peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);

        socket.emit('answer', {
            to: data.from,
            from: socket.id,
            answer,
        });
    });

    // Handle answer
    socket.on('answer', async (data) => {
        await peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));
    });

    // Handle ICE candidates
    socket.on('ice-candidate', (data) => {
        console.log(`ICE Candidate received from: ${data.from}`);
        peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate))
            .then(() => console.log('ICE candidate added successfully'))
            .catch((error) => console.error('Error adding ICE candidate:', error));
    });




});
----------------------------------------------------------------------------------------------------------------------------------